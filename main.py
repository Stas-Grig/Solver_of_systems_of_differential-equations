from numpy import zeros, exp
from ODE_solve import ODE_solver
import matplotlib.pyplot as plt

t_0 = 0  # Начальное значение временного интервала
T = 5  # Конечное значение временного интервала


def f(y, t):
    # Матрица производных системы дифференциальных уравнений или дифференциального уравнения, сведенного к системе
    f = zeros(5)
    f[0] = y[1]
    f[1] = y[2]
    f[2] = y[3]
    f[3] = y[4]
    f[4] = -15 * y[4] - 90 * y[3] - 270 * y[2] - 405 * y[1] - 243 * y[0]
    return f


def f_y(y, t):  # Матрица Якоби системы дифференциальных уравнений или дифференциального уравнения, сведенного к системе
    f_y = zeros((5, 5))
    f_y[0] = [0, 1, 0, 0, 0]
    f_y[1] = [0, 0, 1, 0, 0]
    f_y[2] = [0, 0, 0, 1, 0]
    f_y[3] = [0, 0, 0, 0, 1]
    f_y[4] = [-243, -405, -270, -90, -15]
    return f_y


y_0 = [0, 3, -9, -8, 0]  # Начальное условие

s = ODE_solver(t_0, T)  # Создание объекта решателя
y, t = s.ODESolve(f, y_0, f_y, method="ERK4", error_graph=True,
                  func_graph=False)  # Решение задачи и вывод графиков ошибки и искомых функций
print(s)  # Вывод строковой интерпретации объекта после решения задачи

# Построение графика абсолютной ошибки между численным решением и аналитическим
y_analytic = exp(-3*t) * (3 * t + 9 / 2 * t ** 2 - 4 / 3 * t ** 3- 43 / 4 * t ** 4)
error_y = abs(y[:, 0] - y_analytic)
plt.plot(t, error_y, linewidth="2", color="red")
plt.xlabel("t")
plt.ylabel(r"$|\varepsilon|$")
plt.grid()
plt.title("График абсолютной ошибки")
plt.show()